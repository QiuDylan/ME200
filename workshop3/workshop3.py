#!/usr/bin/env python3# -*- coding: utf-8 -*-"""Created on Wed Sep 18 17:27:24 2024@author: dylanqiuDylan Qiu & Jake Peyser ME200"""import numpy as npimport matplotlib.pyplot as plttracker_data = np.genfromtxt("workshop2data_copy.txt" , skip_header= 1, delimiter = "")tracker_data = np.nan_to_num(tracker_data,nan=0.0)vicon_data = np.genfromtxt("workshop3_cam_obj_data.txt" , skip_header= 1, delimiter = "")vicon_data = np.nan_to_num(tracker_data,nan=0.0)t = np.genfromtxt("workshop3_cam_obj_data.txt", skip_header=1, usecols=0 ) #time from viconx = np.genfromtxt("workshop2data_copy.txt", skip_header=1, usecols=1 ) #tracker xy = np.genfromtxt("workshop2data_copy.txt", skip_header=1, usecols=2 ) #tracker y#dt= 0.001 #delt tx = x*1000y = y*1000v_x = np.genfromtxt("workshop3_cam_obj_data.txt", skip_header=1, usecols=1 ) # cam x from viconv_obj_x = np.genfromtxt("workshop3_cam_obj_data.txt", skip_header=1, usecols=4 ) # obj x from viconrelobj_x = v_obj_x - v_x # relative obj xv_y = np.genfromtxt("workshop3_cam_obj_data.txt", skip_header=1, usecols=2 ) # cam y from viconv_obj_y = np.genfromtxt("workshop3_cam_obj_data.txt", skip_header=1, usecols= 5 ) # obj y from viconrelobj_y = v_obj_y - v_y # relative obj yv_z = np.genfromtxt("workshop3_cam_obj_data.txt", skip_header=1, usecols=3 ) # cam z from viconv_obj_z = np.genfromtxt("workshop3_cam_obj_data.txt", skip_header=1, usecols= 6 ) # obj z from viconrelobj_z = v_obj_z - v_z # relative obj zprint(x*100)"""plt.plot(v_x, t, label = "camera" )plt.plot(v_obj_x, t, label = "object" )plt.plot(relobj_x, t, label = "relative position" )plt.xlabel("x (mm)")plt.ylabel("time")plt.ylim(bottom = 0)plt.grid()plt.legend()""""""plt.plot(v_y, t, label = "camera" )plt.plot(v_obj_y, t, label = "object" )plt.plot(relobj_y, t, label = "relative position" )plt.xlabel("y (mm)")plt.ylabel("time")plt.grid()plt.legend()plt.plot(v_z, t, label = "camera" )plt.plot(v_obj_z, t, label = "object" )plt.plot(relobj_z, t, label = "relative position" )plt.xlabel("z (mm)")plt.ylabel("time")plt.grid()plt.legend()"""#tracker - vicontrk_x = x - v_x #x position along track of cameratrk_obj_x = x - v_obj_x #x position along track of obj# y tracker - z viconvert_z = y - v_z #vertical position along track of cameravert_obj_z = y - v_obj_z #vertical position along track of objdv_xdt = np.gradient(v_x, t)d2v_xdt2 = np.gradient(dv_xdt,t)dv_obj_xdt = np.gradient(v_obj_x, t) d2v_obj_xdt2 = np.gradient(dv_obj_xdt,t)drelobj_xdt = np.gradient(relobj_x, t)d2relobj_xdt2 = np.gradient(drelobj_xdt,t)"""plt.plot(d2v_xdt2, t, label = "a_camera" )plt.plot(d2v_obj_xdt2, t, label = "a_object" )plt.plot(d2relobj_xdt2, t, label = "a_relative position" )plt.xlabel("d2x/dt2 (mm/s^2)")plt.ylabel("time")plt.ylim(bottom = 0)plt.grid()plt.legend()""""""plt.plot(dv_xdt, t, label = "velo_camera" )plt.plot(dv_obj_xdt, t, label = "velo_object" )plt.plot(drelobj_xdt, t, label = "velo_relative position" )plt.xlabel("dv/dt (mm/s)")plt.ylabel("time")plt.ylim(bottom = 0)plt.grid()plt.legend()""""""plt.plot(vert_z,t, label = 'z of Cam vs t')plt.plot(vert_obj_z,t, label = 'z of Obj vs t')plt.plot(y,t, label = 'y_tracker obj vs t')plt.grid()plt.legend()plt.ylim(bottom = 0)plt.xlabel("vertical along track(mm)")plt.ylabel("t(s)")"""plt.plot(trk_x,t, label = 'X_alongtrk of Cam vs t')plt.plot(trk_obj_x,t, label = 'X_alongtrk of Obj vs t')plt.plot(x,t, label = 'x_tracker obj vs t')plt.grid()plt.legend()#plt.ylim(bottom = 0)plt.xlabel("X along track(mm)")plt.ylabel("t(s)")"""dydt = np.gradient(y, dt)d2ydt2 = np.gradient(dydt,t)dxdt = np.gradient(x,t)d2xdt2 = np.gradient(dxdt,t)f, ax = plt.subplots(1)#plt.plot(x,y, label = 'x vs y')#plt.plot(t,x,label='dx/dt')#plt.plot(t,x,label='x vs t')#plt.plot(t,y,label='y vs t')#plt.plot(t,y,label='y vs t') #raw plot#plt.plot(t,dydt,label= 'dy/dt')#plt.plot(t,dxdt,label= 'dx/dt')plt.plot(t,d2xdt2,label= 'a_x')#plt.plot(t,d2ydt2,label= 'a_y')#ax.set_ylim(ymin=0)plt.xlim(left= 0)plt.xlabel("t(s)")#plt.ylabel("accel(m/s**2)")#plt.ylabel("displacement(m)")plt.ylabel("accleration(m/s^2)")plt.grid()plt.legend()"""